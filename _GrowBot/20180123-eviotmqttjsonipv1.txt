EV IOT MQTT JSON INTERFACE PROTOCOLS ("EIMJIP") v2

The purpose of this document is to describe in detail the initialization protocols for EVIOTMQTTJSONIPv1
starting at a very high level concepts, and diving down into the weeds.

EIMJIP means "Elastic ventures, Internet of things, Json, Interface Protocol" I'll briefly explain
each of those terms:

* Elastic Ventures :: http://Elastic.Ventures my company.  The word "elastic" is a technical 
term that means "infinitely scalable" or "infinite growth capable", and simultaneously behaves
like the elastic in sweatpants, the ventures will "reduce" with the demand curve, that means costs
go down as revenue.  Elastic business models are a relatively new concept and they are used by 
virtually all successful BIG Internet companies as part of their most secret sauce.  This technical
documentation is written to educate non-technical people how the system works so they can participate
in conversations and understand that many of the "normal" rules don't apply to us. That will become
apparent as we go. 

* Internet of Things :: or "IoT", means small smart devices, the word "Internet" is incorrect. 
In most cases these are mini-computers, that run for days or weeks off batteries, USB 5v charger,
or equivalent solar+battery source. The two most popular platforms are "Arduino" which uses a 
javascript-like programming language and is cheaper suitable for smaller applications, and 
"Raspberry PI" for larger applications which runs a full "Linux" operating system (the same
operating system thant runs >90% of the servers on the Internet). 

*** ROCKET NOTES: 
I've written books on Linux, was among the first 10,000 users, hung out with Linus (the
Author) as a 16 year old (he was 19), contributed substantially over the years to the adoption 
efforts, and wrote roughly 95% of the questions for the first commercial open-certification exam. 
(It was necessary in government to have certifications for establishing vendor standards, so 
my focus was on creating Linux jobs so people could get employed-paid to contribute). Most of my code
contributions and patches to the NFSv1 & 2 subsystem, the author-maintainer didn't accept much, 
but appreciated the bug reports. Modern Linux is very differnt than what I worked on, but the IoT
versions on a RaspberryPI IoT are orders of magnitude faster than my first 80486 Linux servers were. 

*** ROCKET RECOMMENDATION FOR PARENTS, AUNTS, UNCLES, ETC.:
Arduino experiment kits can be purchased on line for between $25 and $50.  Amazing gifts for kids.
An activity you can (and should) do with them.  It will teach basic electronic and sensor theory,
and javascript-like programming (it's much easier). 
Arduino is the best place to start in my opinion -- kids age 8-12 should pick it up easy.
Later there is a RaspberryPI arduino "bridge" (a connector interface) that means anything built on 
Arduino can be easily moved to RaspberryPI later (but not the other way, smaller can go bigger, but
bigger can't go smaller). 

* MQTT :: "Message Queuing Transmission", a misnomer since the eimjip protocol works with more than 
MQTT; HOWEVER MQTT will be the most common (98% of the traffic). HTTPS, and OTAA (over the air audio) 
are both supported in v1 as well. With support for Whisper (bluetooth) in the protocol, but not
implemented in the v1 interface code libraries (i'll explain what that means in a moment).  

* JSON :: JavaScript Object Notation is a way of writing things so they can be easily digested
by any language with a JSON interpreter library (which 99% have these days). JSON is also fairly 
easy for humans to read, and write. JSON can be identified by the starting and ending "squiggilies" 
{} and in between the squiggilies is data called the "payload".  Payloads can be described in smaller
terms as a series of "keys" and "values" which are delimited (separated) by commas.   

A key label describe the data such as { "FirstName":"Scooby", "LastName":"Doo" }
In the example here "Firstname" and "LastName" are both keys.

Values can further be broken down into /types/ which include: integers, floating-point (decimals), 
"strings", ["arrays","of",1,"or","more","comma","separated","data"], and {"nested":{"key","values"}}

If you are new to Javascript and programming a few notes (google is a great 'more info' reference)

** ROCKET NOTES: 
Don't sweat all the types etc., remember:
* always start and end with a squiggly {}
* spaces outside of the "data" are ignored, 
* commas are important, especially inside "quotes" or "outside", "are" different.
* The case (UPPER-OR-lower) of "keys" is also important (ex: "FirstName", "Firstname", "firstname", "firstName"
are all different). 
* Computers are very precise and sometimes humans have trouble with that level of attention to detail, missing
squigglies, incorrect comma placement, and improper case are 90% of the most common things people get stuck on
in their first projects. 

There is a bit more to Javascript (but not much), it is beyond the scope of this document (google it). 
One thing about Elastic protocols is that they will tend to be very "flat" with few nested javascript 
structures. Nested structures do not export well to CSV / Excel spreadsheets and have less complexity.   

* Interface :: also called an "API" or Application Programming Interface, is a point of delineation 
where two systems meet.  A way of sending command instructions and receiving results. 

** ROCKET NOTES: 
Interface designs are my speciality, it's a super-power of mine, from assembler, up to the brain of the 
user at the screen, technology is buit in layers, and I know all of them.  For example the asthetic 
design of an application is called the "User Interface" or "UI" for short.  An API is an interface that
is designed for software-to-software communication, there are no mouse buttons, or fancy animations
it's simply:  send json to "interface", receive back json response.  I can explain all the layers
behind that make the network operate as well. 

*** ROCKET NOTES ABOUT EIMJIP: 
 "eimjip" is a 'meta-interface' protocol which means it can be used to 
connect many different types of systems together [meme: ALL YOUR BASE BELONG TO US], 
a single message may pass through many systems being wrapped in layers like a smelly little onion.  
As such eimjip is a bit more complex, but it is designed to be put into libraries 
(reusable packages of program code commands and utilities) allowing us to 
improve, enhance, and expand over time without redesigning the whole system. 

For a non-technical user/customer service user - once you understand eimjip you'll be able to diagnose 
literally any 
part of the system that speaks it, and you'll see simple protocols like people who speak in clicks
and whistles, which somewhat ironically is a feature of EIMJIP (speaking in clicks and whistles,
more on that later). Using libraries means re-using existing code that is already tested and 
known to be working, new features or utilities added expand the overall library (like adding books
to a real library) making it smarter and more powerful but also bigger and slower to load). 

*  Protocol :: means a 'set of rules', which is literally this document. it defines what everything
means and how all the pieces.  For non-programmers you can probably use the word "protocol" and
"program" interchangeably, basically a program is just a set of instructions, add this, put 
this text here, go to this URL, execute this command and put the result here. 

** ROCKET NOTES: A protocol is rules saying what should happen.  That might also include how 
to handle errors // miscommunication (ex: detect it, retransmit, 3 attempts, then log detailed error
and show the user a "pretty" message).  
The distinction between a large scale and small-scale 
application will often be how errors are handled. A well engineered Elastic application will 
have built in diagnostic routines, versioning to facilitate upgrades, and comprehensive 
documentation and reasonable automated-quality-test code checking before going live.  
Most companies don't build these into their first versions, and spend years going back 
re-adding them. 

--------------------------------

Alright, now you're ready to jump into EIMJIP:

pronounced "emm-jyp": the universal language spoken by our devices when they talk to eachother. 
the final "a" in "EIMJIPa" is lowercase, for acronym, or abstract.  
This pattern of characters is very "grep"-worthy and will be one of a dozen different international 
trademarks we'll use to protect our intellectual property.

I'm going to briefly explain "WHY" naming conventions and word precision are important, because they define 
a style and provide a simple way to convey complex subjects to those who understand and use them. 
I enjoy employing "humor" in my designs, and also special terms and markers are a signature of any "artist" 
to denote  that it is my work, or derived from my work. Some are obvious, some are hidden, all are embedded 
difficult to remove. 

I also employ "word precision" throughout technical and business specifications.  In many cases that means
defining or "inventing" a new word to reference an abstract concept.  
In the example above there are two vocabulary words:
* eimjip : the language our devices speak.

** ROCKET NOTE: one very common problem I see with new programmers is that they use generic interface 
specifications and don't bother to define new terms and use them consistently.  Usually this comes from
a lack of properly understanding the problem at the time of design. 

Trademarks are by far the easiest // least expensive // most 'common sense' and 'distinguishable'
form for law for judges and juries it's often "obvious", a trademarks cost $45/year and can created in 
a few minutes, often litigated for a few hundred dollars in legal fees by mediocre attorney, 
compared to patent which can cost $50k to file, and $2+ million to litigate.  International trademarks
cost a bit more (around $1200), and case-law has been used to protect the interest end luxury brands like
rolex, prada, etc. and so will we.  While I'm an "open-source proponent" I'm not a fan of somebody
ripping off large parts of our system and calling it their own.  Our protocols talk to our devices.
If you want to use our protocols, you will either pay us, or fall within our "acceptable use" policy,
which we may revise at our discretion.  The layout of eimjip is intended to provide fair-use. 
I hope you enjoy "eimjip" 

EIMJIP can be "spoken" (audio), "whispered" (bluetooth), "blinked" (using LED's), 
or "intertubed" (https, or mqtt over wifi). it is the same protocol, there is only one.

** NOTE: both growpotbot and robovend ONLY require "spoken" and "intertubed" libraries to be finished
for MVP ("Minimum Viable Product"). 

All devices will have a "program" (or "Learning" mode) where they can receive new instructions.
this will be controlled with a "learn" switch which must be set "on" for the system to receive commands.
when learn is in the "off" position the system is considered in a "read-only" state.

data structures in this file will be presented in { "JSON":"FORMAT" }, if you aren't familiar with JSON
it is an acyronym "JavaScript Object Notation" and 

Website
** Static site, hosted on S3 bucket
** AWS Code Commit // GIT Repo (libraries are separate) 
** Single Page App
** React

Javascript NPM libraries
** Shared across ALL PROJECTS 
** S3 Hosted, Cloudfront CDN Fixed URLs 
** AWS Code Commit // GIT Repo 
** EIMJIP Audio Library


REGISTRATION PROTOCOLS


EIMJIP OTAA SOUND TRANSLATION (base64)  A-Z,a-z,0-9,!@#$%^&*()/
{
}


** todo bot
ask them for milestones, so i can stage todo's in each channel at various milestones.
todo labels. 

** Follow Up:
#legal : /todo @b 